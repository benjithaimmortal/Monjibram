<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/monjiredes/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/monjiredes/" rel="alternate" type="text/html" /><updated>2020-05-17T18:47:02-04:00</updated><id>http://localhost:4000/monjiredes/feed.xml</id><title type="html">Monjibram</title><subtitle>Benjamin Kostenbader is the award-winning co-developer of the Seongdong Global Experience Centers in Seoul, South Korea. He is also a proud father, software developer, cyclist, and squash enthusiast.</subtitle><entry><title type="html">AJAX from the Beginning</title><link href="http://localhost:4000/monjiredes/tutorials/2020/05/17/ajax-part-1.html" rel="alternate" type="text/html" title="AJAX from the Beginning" /><published>2020-05-17T08:06:00-04:00</published><updated>2020-05-17T08:06:00-04:00</updated><id>http://localhost:4000/monjiredes/tutorials/2020/05/17/ajax-part-1</id><content type="html" xml:base="http://localhost:4000/monjiredes/tutorials/2020/05/17/ajax-part-1.html">&lt;p&gt;I’m going to let you in on a secret superpower I have. With a small string of text, I can download any website in the world. OK, so maybe it’s not very super. It’s called an HTTP request and your browser does this all the time. But what if you could do it &lt;em&gt;yourself&lt;/em&gt;? We call that AJAX.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Disclaimer!&lt;/strong&gt; &lt;em&gt;This article assumes a basic knowledge of HTTP REST structure. If you know what GET and POST mean, read on! Otherwise, I highly recommend going straight to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&quot;&gt;Wikipedia source&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AJAX stands for Asynchronous JavaScript and XML. It was developed to call and return XML strings from a server. But it’s been widely adopted as a solution for getting things from other pages, or doing the things that your browser does, independently of the standard ways it does them.&lt;/p&gt;

&lt;p&gt;For example, let’s say we want to send a form. With HTML’s &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element, I can tell the browser to send information via POST or GET request types through a very predictable and typical process:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Gather the form fields.&lt;/li&gt;
  &lt;li&gt;Do the HTTP request.&lt;/li&gt;
  &lt;li&gt;Reload the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But what if I don’t want to reload? Reloading on form submission is a terrible UX. Modern web design will &lt;em&gt;never&lt;/em&gt; reload on form submission. Instead, we use AJAX.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[This next bit is going to use jQuery, and I’ll explain why in a moment. Credit: &lt;a href=&quot;https://scotch.io/tutorials/submitting-ajax-forms-with-jquery&quot;&gt;scotch.io&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#form&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// stop the form from submitting and refreshing by preventing the default browser behavior&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// gather and validate data fields from the form, typically storing the result as JSON&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// AJAX, the jQuery way&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// define the type of HTTP verb we want to use (POST for our form)&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;process.php&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the url where we want to POST&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// our data object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dataType&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// what type of data do we expect back from the server&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// using something called a Promise, we can wait for the servers to respond, then use the results when they come&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// log data to the console so we can see the result and confirm no errors&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Benji</name></author><summary type="html">I’m going to let you in on a secret superpower I have. With a small string of text, I can download any website in the world. OK, so maybe it’s not very super. It’s called an HTTP request and your browser does this all the time. But what if you could do it yourself? We call that AJAX.</summary></entry><entry><title type="html">Code and Supply AJAX</title><link href="http://localhost:4000/monjiredes/case%20studies/2020/05/17/case-study-ajax.html" rel="alternate" type="text/html" title="Code and Supply AJAX" /><published>2020-05-17T08:06:00-04:00</published><updated>2020-05-17T08:06:00-04:00</updated><id>http://localhost:4000/monjiredes/case%20studies/2020/05/17/case-study-ajax</id><content type="html" xml:base="http://localhost:4000/monjiredes/case%20studies/2020/05/17/case-study-ajax.html">&lt;p&gt;sample case study&lt;/p&gt;</content><author><name>Benji</name></author><summary type="html">sample case study</summary></entry><entry><title type="html">How I Paginated this Blog</title><link href="http://localhost:4000/monjiredes/tutorials/2020/05/17/paginate-with-jekyll.html" rel="alternate" type="text/html" title="How I Paginated this Blog" /><published>2020-05-17T08:06:00-04:00</published><updated>2020-05-17T08:06:00-04:00</updated><id>http://localhost:4000/monjiredes/tutorials/2020/05/17/paginate-with-jekyll</id><content type="html" xml:base="http://localhost:4000/monjiredes/tutorials/2020/05/17/paginate-with-jekyll.html">&lt;p&gt;I used &lt;code class=&quot;highlighter-rouge&quot;&gt;paginate: 5&lt;/code&gt; and 
&lt;code class=&quot;highlighter-rouge&quot;&gt;paginate_path: &quot;/blog/:num/&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I also learned that &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; becomes the slash on whatever its root. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;blog/index.html&lt;/code&gt; is happily routed as &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog/&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;oh dear, and this https://eduardoboucas.com/blog/2014/11/05/adding-ajax-pagination-to-jekyll.html&lt;/p&gt;

&lt;p&gt;The End.&lt;/p&gt;</content><author><name>Benji</name></author><summary type="html">I used paginate: 5 and paginate_path: &quot;/blog/:num/&quot;</summary></entry><entry><title type="html">Snakes and …Bridges</title><link href="http://localhost:4000/monjiredes/case%20studies/2020/05/17/snakes-and-bridges.html" rel="alternate" type="text/html" title="Snakes and ...Bridges" /><published>2020-05-17T08:06:00-04:00</published><updated>2020-05-17T08:06:00-04:00</updated><id>http://localhost:4000/monjiredes/case%20studies/2020/05/17/snakes-and-bridges</id><content type="html" xml:base="http://localhost:4000/monjiredes/case%20studies/2020/05/17/snakes-and-bridges.html">&lt;p&gt;here’s a blog about Pete&lt;/p&gt;</content><author><name>Benji</name></author><summary type="html">here’s a blog about Pete</summary></entry><entry><title type="html">You Can Probably JAM-Stack That</title><link href="http://localhost:4000/monjiredes/jam-stack/static%20sites/2020/05/16/jam-that-sucker.html" rel="alternate" type="text/html" title="You Can Probably JAM-Stack That" /><published>2020-05-16T08:06:00-04:00</published><updated>2020-05-16T08:06:00-04:00</updated><id>http://localhost:4000/monjiredes/jam-stack/static%20sites/2020/05/16/jam-that-sucker</id><content type="html" xml:base="http://localhost:4000/monjiredes/jam-stack/static%20sites/2020/05/16/jam-that-sucker.html">&lt;p&gt;I’m here to tell you that you’re paying too much to host your marketing website. Wait, you didn’t tell me… how much are you… ? Oh yeah, it doesn’t matter, if it isn’t free, it’s too much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enter your hosting fee here, then click the button&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;input type=&quot;number&quot; class=&quot;doesnt-matter&quot; /&gt;
&lt;button onclick=&quot;alert('Too much :(')&quot;&gt;How much?&lt;/button&gt;&lt;/p&gt;

&lt;p&gt;There’s got to be a catch, you say. I get what I pay for. I’m going to drop quality somewhere. Maybe I won’t get a custom url? Maybe I have to choose from a gaudy design template, or worse, use a clunky website editor like it’s 2005 and I’m building a MySpace profile. Is it going to be slow? It’ll probably be really slow.&lt;/p&gt;

&lt;p&gt;No, my friend, this is 2020 and computers work for you. Well, at least they will, if you step outside of the cookie cutter Wix profile that your competitor is paying up to $500 a month for &lt;em&gt;for the rest of their meager existence&lt;/em&gt;. This is the year of STATIC SITES.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Static Site&lt;/dt&gt;
  &lt;dd&gt;A website that doesn’t need to send data back and forth to your browser to provide its content [browser-based]&lt;/dd&gt;
  &lt;dd&gt;A website that can connect to everything without a server [serverless]&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&quot;some-history&quot;&gt;Some History&lt;/h2&gt;
&lt;p&gt;Actually, static sites have been around since the 1990’s. Back before every page needed login credentials, when the internet was a small place with anonymous pages, many of those pages were static. They were quick, available to everyone, and resource-cheap. That’s the definition of a marketing site!&lt;/p&gt;</content><author><name>Benji</name></author><summary type="html">I’m here to tell you that you’re paying too much to host your marketing website. Wait, you didn’t tell me… how much are you… ? Oh yeah, it doesn’t matter, if it isn’t free, it’s too much.</summary></entry><entry><title type="html">Times They are a’ Changin’</title><link href="http://localhost:4000/monjiredes/career%20change/2020/05/16/times-a-changin.html" rel="alternate" type="text/html" title="Times They are a' Changin'" /><published>2020-05-16T08:06:00-04:00</published><updated>2020-05-16T08:06:00-04:00</updated><id>http://localhost:4000/monjiredes/career%20change/2020/05/16/times-a-changin</id><content type="html" xml:base="http://localhost:4000/monjiredes/career%20change/2020/05/16/times-a-changin.html">&lt;p&gt;&lt;em&gt;How did I get myself into this?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s a question I often ask myself when it’s late at night and I am hacking away, retooling a data integration on someone’s personal site. But it’s also a question that you might want the answer for, if you’re somewhere on the path to a career change in software development.&lt;/p&gt;</content><author><name>Benji</name></author><summary type="html">How did I get myself into this?</summary></entry><entry><title type="html">TIL: AJAX for WordPress</title><link href="http://localhost:4000/monjiredes/til/2020/05/16/blobs.html" rel="alternate" type="text/html" title="TIL: AJAX for WordPress" /><published>2020-05-16T08:06:00-04:00</published><updated>2020-05-16T08:06:00-04:00</updated><id>http://localhost:4000/monjiredes/til/2020/05/16/blobs</id><content type="html" xml:base="http://localhost:4000/monjiredes/til/2020/05/16/blobs.html">&lt;p&gt;Pressin’ those words with WordPress…&lt;/p&gt;</content><author><name>Benji</name></author><summary type="html">Pressin’ those words with WordPress…</summary></entry></feed>
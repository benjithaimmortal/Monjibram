<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://monjibram.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://monjibram.com/" rel="alternate" type="text/html" /><updated>2020-05-19T00:00:34-04:00</updated><id>https://monjibram.com/feed.xml</id><title type="html">Monjibram</title><subtitle>Benjamin Kostenbader is the award-winning co-developer of the Seongdong Global Experience Centers in Seoul, South Korea. He is also a proud father, software developer, cyclist, and squash enthusiast.</subtitle><entry><title type="html">You Should Probably JAM-Stack That</title><link href="https://monjibram.com/jam-that-sucker/" rel="alternate" type="text/html" title="You Should Probably JAM-Stack That" /><published>2020-05-17T08:09:00-04:00</published><updated>2020-05-17T08:09:00-04:00</updated><id>https://monjibram.com/jam-that-sucker</id><content type="html" xml:base="https://monjibram.com/jam-that-sucker/">&lt;p&gt;I use WordPress all day every day. It’s extremely customizable and easy for both web administrators and developers. But you don’t need WordPress. You need JAM-stack.&lt;/p&gt;

&lt;p&gt;Top Hat makes custom WordPress sites that are both deliciously beautiful and incredibly easy to use. I work with a lot of small- and medium-sized businesses and their marketing sites. I also freelance for up-and-coming businesses and people who consider their budgets a bit lower. I’m even a participating member of WP Pittsburgh, the group for small business owners and developers who study and practice all things WordPress. But I’m still here telling you that … you probably don’t need it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enter your hosting fee here, then click the button&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$&lt;input type=&quot;number&quot; class=&quot;doesnt-matter&quot; placeholder=&quot;40&quot; style=&quot;padding: 5px 0;&quot; /&gt;
&lt;button onclick=&quot;alert('Too much :(')&quot; style=&quot;padding: 5px; border: none; background: #d8acb2;&quot;&gt;How much?&lt;/button&gt;&lt;/p&gt;

&lt;p&gt;There’s got to be a catch, you say. I get what I pay for. I’m going to drop quality somewhere. Maybe I won’t get a custom url? Maybe I have to choose from a gaudy design template, or worse, use a clunky website editor like it’s 2005 and I’m building a MySpace profile. Is it going to be slow? It’ll probably be really slow.&lt;/p&gt;

&lt;p&gt;It’s true that if you’re paying for a little server you’re probably not getting the maximum speed out of your site. And if you’re hosting tons and tons of data like a forum or a video library you will need a place to store it (and that gets expensive in its own right). But why use a server at all? This is the year of STATIC SITES.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Static Site&lt;/dt&gt;
  &lt;dd&gt;A website that doesn’t need to send data back and forth to your browser to provide its content [browser-based]&lt;/dd&gt;
  &lt;dd&gt;A website that can connect to everything without a server [serverless]&lt;/dd&gt;
&lt;/dl&gt;

&lt;h4 id=&quot;markup&quot;&gt;M[arkup]&lt;/h4&gt;

&lt;h2 id=&quot;some-history&quot;&gt;Some History&lt;/h2&gt;
&lt;p&gt;Actually, static sites have been around since the 1990’s. Back before every page needed login credentials, when the internet was a small place with anonymous pages, many of those pages were static HTML markup. They were quick, available to everyone, and resource-cheap. That’s the definition of a marketing site!&lt;/p&gt;

&lt;p&gt;So why isn’t everything static? Your own technical experience, for starters. Early static sites needed experience with HTML at a bare minimum. Adding assets like audio, images, and video dynamically and styling the results was a big ask. A graphical interface for uploading media? Forget it.&lt;/p&gt;

&lt;p&gt;That’s where WordPress came in, and that’s why it’s been the king for almost 20 years. It provides a cool(ish) GUI that will help your marketing people get the job done without getting encumbered by strange &lt;code class=&quot;highlighter-rouge&quot;&gt;{curly braces}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$weird_Naming_Conventions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But today we’ve got &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; and &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt; bringing the heat without the cost of a fire. These give you the freedom to use good-looking interfaces and a Google Docs-style text editor, and their base plans are free!&lt;/p&gt;

&lt;h4 id=&quot;apis&quot;&gt;A[PIs]&lt;/h4&gt;

&lt;h2 id=&quot;you-probably-dont-need-to-log-in-but-if-you-do&quot;&gt;You Probably Don’t Need to Log In. But If You Do…&lt;/h2&gt;
&lt;p&gt;You’re not making Facebook 3.0. You’re not asking for a number-munching Site as a Service. You’re just trying to get visibility. Any dynamic experience you need to give your customers could come from a simple cookie.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If that last sentence sounded like gibberish, &lt;a href=&quot;/contact/&quot;&gt;talk to me later&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But even if you are, modern web development uses these cool things called REST APIs for a lot of heavy lifting. These are tiny applications that talk to your site from afar, and deliver content you need on request. They’re the fast-food of the internet, and the speed is readily apparent. Those large media and file databases we spoke of earlier can still exist independently of your site, and they don’t need to slow you down.&lt;/p&gt;

&lt;p&gt;That includes eCommerce. There is no reason to set up your products on a service like &lt;a href=&quot;https://shopify.dev/docs/admin-api/rest/reference&quot;&gt;Shopify&lt;/a&gt; or &lt;a href=&quot;https://woocommerce.github.io/woocommerce-rest-api-docs/#introduction&quot;&gt;WooCommerce&lt;/a&gt;, then set them up again inside of your own site. Do it once, and then interface it. Hence &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface. Heck, you can even use &lt;a href=&quot;https://snipcart.com/&quot;&gt;SnipCart&lt;/a&gt; and it will do most of the interfacing for you. ✌️&lt;/p&gt;

&lt;h4 id=&quot;javascript&quot;&gt;J[avaScript]&lt;/h4&gt;
&lt;h2 id=&quot;and-then-there-was-javascript&quot;&gt;And then there was JavaScript&lt;/h2&gt;
&lt;p&gt;Wix costs up to &lt;em&gt;$500 a month&lt;/em&gt; for fancy templates. WordPress plugins will quickly rack up site costs for functionality. But a one-size-fits-all solution, built to scale to any size, also adds a lot of dead weight. All the talking back and forth between your site and a server &lt;em&gt;quickly&lt;/em&gt; becomes more taxing than an API, and nothing new is actually getting done.&lt;/p&gt;

&lt;p&gt;A savvy developer could template and build a lightweight, fully custom site to your exact specifications. But actually there’s more than that! What if your site could preload the next page’s images while you read, or hack the browser to stop it from reloading content it already has? That’s possible with modern JavaScript frameworks like React, Angular, and Vue.&lt;/p&gt;

&lt;p&gt;I strongly encourage you to hit F12 and take a look at all the crazy things a simple blog like this needs to load and give to every browser that visits. Search engine meta, styles, JS libraries to make things scroll smoothly… on a standard hosted site it will all load again on every click. Storing it properly and only loading &lt;em&gt;new&lt;/em&gt; things adds serious speed. I’m talking &lt;a href=&quot;https://www.shopflamingo.com&quot;&gt;blazingly&lt;/a&gt;, &lt;a href=&quot;https://ca.braun.com/en-ca&quot;&gt;ludicrously&lt;/a&gt; &lt;a href=&quot;https://airbnb.io/&quot;&gt;fast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So that’s &lt;strong&gt;JAM-stack&lt;/strong&gt;, and it’s going to separate you from your competition. All you need is &lt;a href=&quot;/contact/&quot;&gt;the right developer&lt;/a&gt;. And save all of the hosting costs! That hosting money is much better spent on web consultancy, or invested in the development of the site itself.&lt;/p&gt;

&lt;p&gt;After that it’s 100% yours. You can build out additional pages to your needs, and fill it up with content that will directly attract your clientele. You can even sell products. All without that monthly hosting fee.&lt;/p&gt;</content><author><name>Benji</name></author><summary type="html">I use WordPress all day every day. It’s extremely customizable and easy for both web administrators and developers. But you don’t need WordPress. You need JAM-stack.</summary></entry><entry><title type="html">How I Paginated this Blog</title><link href="https://monjibram.com/paginate-with-jekyll/" rel="alternate" type="text/html" title="How I Paginated this Blog" /><published>2020-05-17T08:07:00-04:00</published><updated>2020-05-17T08:07:00-04:00</updated><id>https://monjibram.com/paginate-with-jekyll</id><content type="html" xml:base="https://monjibram.com/paginate-with-jekyll/">&lt;p&gt;I used the following code in &lt;code class=&quot;highlighter-rouge&quot;&gt;/config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;paginate_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/blog/:num/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also learned that &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; becomes the slash on whatever its root. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;blog/index.html&lt;/code&gt; is happily routed as &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog/&lt;/code&gt;! So don’t worry about&lt;/p&gt;

&lt;p&gt;Oh dear, and I’ll likely do &lt;a href=&quot;https://eduardoboucas.com/blog/2014/11/05/adding-ajax-pagination-to-jekyll.html&quot;&gt;this&lt;/a&gt; next…&lt;/p&gt;

&lt;p&gt;The End.&lt;/p&gt;</content><author><name>Benji</name></author><summary type="html">I used the following code in /config.yml:</summary></entry><entry><title type="html">AJAX from the Beginning</title><link href="https://monjibram.com/ajax-part-1/" rel="alternate" type="text/html" title="AJAX from the Beginning" /><published>2020-05-17T08:06:00-04:00</published><updated>2020-05-17T08:06:00-04:00</updated><id>https://monjibram.com/ajax-part-1</id><content type="html" xml:base="https://monjibram.com/ajax-part-1/">&lt;p&gt;I’m going to let you in on a secret superpower I have. With a small string of text, I can download any website in the world. OK, so maybe it’s not very super. It’s called an HTTP request and your browser does this all the time. But what if you could do it &lt;em&gt;yourself&lt;/em&gt;? We call that AJAX.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Disclaimer!&lt;/strong&gt; &lt;em&gt;This article assumes a basic knowledge of HTTP’s structure. If you know the meaning of GET and POST, read on! Otherwise, I highly recommend going straight to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&quot;&gt;Wikipedia source&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AJAX is &lt;strong&gt;A&lt;/strong&gt;synchronous &lt;strong&gt;J&lt;/strong&gt;avaScript &lt;strong&gt;a&lt;/strong&gt;nd &lt;strong&gt;X&lt;/strong&gt;ML. It was developed to call and return XML strings from a server, but it’s been widely adopted as a solution for getting things from other pages, or doing the things that your browser does independently of the standards to which it adheres.&lt;/p&gt;

&lt;p&gt;For example, let’s say we want to send a form. With HTML’s &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element, I can tell the browser to send information via POST or GET request types through a very predictable and typical process:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Gather the form fields.&lt;/li&gt;
  &lt;li&gt;Do the HTTP request.&lt;/li&gt;
  &lt;li&gt;Reload the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But what if I don’t want to reload? Reloading on form submission is a terrible UX. Modern web design will &lt;em&gt;never&lt;/em&gt; reload on form submission. Instead, we use AJAX.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[This next bit is going to use jQuery, and I’ll explain why in a moment. Credit: &lt;a href=&quot;https://scotch.io/tutorials/submitting-ajax-forms-with-jquery&quot;&gt;scotch.io&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#form&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// stop the form from submitting and refreshing by preventing the default browser behavior&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// gather and validate data fields from the form, typically storing the result as JSON&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// AJAX, the jQuery way&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// define the type of HTTP verb we want to use (POST for our form)&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;process.php&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the url where we want to POST&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// our data object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dataType&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// what type of data do we expect back from the server&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// using something called a Promise, we can wait for the servers to respond, then use the results when they come&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// log data to the console so we can see the result and confirm no errors&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;cool-so-now-what-about-that-jq&quot;&gt;Cool, so now what about that JQ?&lt;/h2&gt;

&lt;p&gt;Yeah, so jQuery’s AJAX feels pretty simple. It’s just the HTTP &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; we’re grabbing from, and a body of any data. Maybe you can encode it, or use HTTP headers if you’re getting really fancy.&lt;/p&gt;

&lt;p&gt;The original method is a bit more cumbersome. The &lt;a href=&quot;https://caniuse.com/#feat=mdn-api_xmlhttprequest&quot;&gt;universally supported&lt;/a&gt; base method for AJAX is called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHttpRequest()&lt;/code&gt;&lt;/a&gt;. It is so very much harder for AJAX newcomers to grasp. So I’m going to break it down for you in Part 2!&lt;/p&gt;</content><author><name>Benji</name></author><summary type="html">I’m going to let you in on a secret superpower I have. With a small string of text, I can download any website in the world. OK, so maybe it’s not very super. It’s called an HTTP request and your browser does this all the time. But what if you could do it yourself? We call that AJAX.</summary></entry></feed>